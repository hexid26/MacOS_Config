CURRENT_OS="" #centos | ubuntu | osx and other valid options
OS_TYPE=""    #darwin | linux
function findCurrentOS() {
  OS_TYPE=$(uname)
  case "$OS_TYPE" in
    "Darwin")
      {
        # echo "Running on Mac OSX."
        CURRENT_OS="osx"
      }
      ;;
    "Linux")
      {
        # If available, use LSB to identify distribution
        if [ -f /etc/lsb-release -o -d /etc/lsb-release.d ]; then
          DISTRO=$(gawk -F= '/^ID=/{print $2}' /etc/os-release)
        else
          DISTRO=$(ls -d /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
        fi
        CURRENT_OS=$DISTRO
      }
      ;;
    *)
      {
        tput setaf 1
        echo "Unsupported OS, exiting"
        tput sgr0
        exit
      }
      ;;
  esac
}
findCurrentOS
CURRENT_OS=$(echo $CURRENT_OS | tr 'A-Z' 'a-z')
OS_TYPE=$(echo $OS_TYPE | tr 'A-Z' 'a-z')

# ! PATH 路径设置
## export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH=/usr/local/bin:${PATH}
export PATH=/usr/local/sbin:$PATH
export PATH=/Library/TeX/texbin:${PATH}
export PATH=/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin:$PATH
export ZSH=${HOME}/.oh-my-zsh # Path to your oh-my-zsh installation.
if [ "$OS_TYPE"x = "linux"x ]; then
  # * for CUDA
  export PATH=/usr/local/cuda/bin:${PATH}
  # * LD_LIBRARY_PATH
  # export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/lib
  # * for TensorFlow
  export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
fi
# * pyenv 路径设置
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
# * thefuch 路径设置
eval $(thefuck --alias)
# * autojump 设置
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh
# * 设置颜色
export LSCOLORS='exfxcxdxbxegedabagegeb'
export TERM=xterm-256color

# * ZSH Themes
# * random / powerlevel9k / powerlevel10k
my_zsh_theme=powerlevel10k
case ${my_zsh_theme} in
  powerlevel9k)
    ZSH_THEME=powerlevel9k/powerlevel9k
    [[ -f ~/.p9k.zsh ]] && source ~/.p9k.zsh
    ;;
  powerlevel10k)
    ZSH_THEME=powerlevel10k/powerlevel10k
    [[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh
    ;;
  *)
    ZSH_THEME="random"
    ;;
esac

# ! ZSH Configuration
# * Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"
# * Uncomment the following line to use hyphen-insensitive completion. Case
# * sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"
# * Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"
# * Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13
# * Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"
# * Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"
# * Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"
# * Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"
# * Uncomment the following line if you want to disable marking untracked files
# * under VCS as dirty. This makes repository status check for large repositories
# * much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"
# * Uncomment the following line if you want to change the command execution time
# * stamp shown in the history command output.
# * The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"
# * Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder
# * Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# * Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# * Example format: plugins=(rails git textmate ruby lighthouse)
# * Add wisely, as too many plugins slow down shell startup.
plugins=(git bundler osx rake autojump extract web-search)

# ! 挂载 ZSH
source $ZSH/oh-my-zsh.sh

# ! User configuration
# * zsh 配置 glob 以满足文件名中特殊字符不被扩展
setopt glob
setopt no_nomatch
unsetopt histexpand
setopt nocasematch
setopt nocaseglob
# * Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# * Compilation flags
# export ARCHFLAGS="-arch x86_64"

# * ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# * Set personal aliases, overriding those provided by oh-my-zsh libs,
# * plugins, and themes. Aliases can be placed here, though oh-my-zsh
# * users are encouraged to define aliases within the ZSH_CUSTOM folder.
# * For a full list of active aliases, run `alias`.
alias cd..="cd .."
alias cleardsstore="sudo find / -name '.DS_Store' -depth -exec rm {} \;"
alias l="ls -lhF"
alias lr="ls -lhFR"
alias ll="ls -alhF"
alias llr="ls -alhFR"
if [ -f "/usr/local/bin/nvim" -o -f "/usr/bin/nvim" ]; then
  alias vi="nvim"
  alias vim="nvim"
fi
alias zshconfig="nvim ~/.zshrc"
alias ohmyzshconfig="nvim ~/.oh-my-zsh"
alias update-pip="pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U"
alias update-zsh='cd ~/.oh-my-zsh;git pull;cd ~/.oh-my-zsh/custom/themes/powerlevel10k;git pull'
alias git-proxy-on='git config --global http.proxy socks5://127.0.0.1:1080;git config --global https.proxy socks5://127.0.0.1:1080'
alias git-proxy-off='git config --global --unset-all http.proxy;git config --global --unset-all https.proxy'
if [ "$OS_TYPE"x = "darwin"x ]; then
  alias update-brew="brew update;brew upgrade;brew cleanup;brew doctor"
fi
if [ "$OS_TYPE"x = "linux"x ]; then
  alias update-pac="genpac --pac-proxy \"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=\"autoproxy.pac\""
fi
if [ "$CURRENT_OS"x = "osx"x ]; then
  alias update-software='sudo softwareupdate -i -a;mas upgrade;echo "error: mas 有 bug，无法更新"'
elif [ "$CURRENT_OS"x = "centos"x ]; then
  alias update-software="sudo yum update;sudo yum upgrade;sudo yum autoremove;sudo yum autoclean"
elif [ "$CURRENT_OS"x = "ubuntu"x ]; then
  alias update-software="sudo apt-get update;sudo apt-get upgrade;sudo apt-get autoremove;sudo apt-get autoclean"
fi

# * Correctly display UTF-8 with combining characters.
if [ "$TERM_PROGRAM" = "Apple_Terminal" ]; then
  setopt combiningchars
fi

# * Language ENV
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

if [ "$OS_TYPE"x = "linux"x ]; then
  # * ssh intergration
  if [ $SSH_CONNECTION ]; then
    test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
  fi
  # * iTerm2 shell intergration
  [[ $TERM_PROGRAM == "iTerm.app" ]] && test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
elif [ "$OS_TYPE"x = "darwin"x ]; then
  test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
fi

function iterm2_print_user_vars() {
  iterm2_set_user_var currentPath $(echo ${PWD})
  iterm2_set_user_var currentUser $(echo ${USER})
}

disable log
